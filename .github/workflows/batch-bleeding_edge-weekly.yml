name: batch-bleeding_edge-weekly

on:
  workflow_dispatch:
  push:
    branches:
      - master
  schedule:
    - cron: '1 1 * * 4'

jobs:
  build-libs:
    name: Build all libraries
    runs-on: windows-2022
    steps:
      - name: 'Setup MSYS2 environment'
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          cache: true
          install: |
            git
            base-devel
            mingw-w64-ucrt-x86_64-toolchain
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-pkg-config
          pacboy: toolchain:p

      - name: Set Git to use LF line endings
        run: git config --global core.autocrlf false

      - name: Checkout project code
        uses: actions/checkout@v4
        # The "with: path:" line has been removed to fix the directory path.

      - name: Build and install all libraries sequentially
        shell: msys2 {0}
        env:
          # The GITHUB_WORKSPACE variable is the reliable way to get the path
          PKG_CONFIG_PATH: /opt/lib/pkgconfig
        run: |
          # Libraries are ordered to build dependencies first.
          LIBS=(
            "ffnvcodec-dev" "lame-dev" "lcms2-dev" "libdovi-dev" "libdvdcss-dev"
            "luajit" "opus-dev" "python-embed" "vapoursynth" "libogg-dev"
            "libvorbis_aotuv-dev" "freetype2-dev" "libbluray-dev" "fribidi-dev"
            "harfbuzz-dev" "libass-dev" "libdvdread-dev" "libdvdnav-dev"
            "vulkan-dev" "shaderc-dev" "spirv-cross-dev" "libplacebo-dev"
          )

          for lib_path in "${LIBS[@]}"; do
            echo "::group::Building and Installing ${lib_path}"
            # Use GITHUB_WORKSPACE for a reliable path
            cd "${GITHUB_WORKSPACE}/${lib_path}"
            makepkg -sfi --noconfirm --noprogressbar
            echo "::endgroup::"
          done

      - name: Delete old assets
        if: always()
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: dev
          assets: "*.zst"
          fail-if-no-assets: false
          fail-if-no-release: false
      - name: Delete old assets (latest)
        if: always()
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: latest
          assets: "*.xz"
          fail-if-no-assets: false
          fail-if-no-release: false

      - name: Upload 'dev' packages
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./*-dev/*.zst
          tag: dev
          overwrite: true
          file_glob: true

      - name: Upload 'latest' packages (luajit)
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./luajit/*pkg*.xz
          tag: latest
          overwrite: true
          file_glob: true

      - name: Upload 'latest' packages (python)
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./python-embed/*pkg*.xz
          tag: latest
          overwrite: true
          file_glob: true

      - name: Upload 'latest' packages (vapoursynth)
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./vapoursynth/*pkg*.xz
          tag: latest
          overwrite: true
          file_glob: true

  ffmpeg:
    needs: build-libs
    runs-on: windows-2022
    steps:
      - name: 'Setup MSYS2 environment'
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          cache: true
          install: git base-devel nasm mingw-w64-ucrt-x86_64-toolchain

      - name: Set Git to use LF line endings
        run: git config --global core.autocrlf false

      - name: Checkout project code
        uses: actions/checkout@v4
        # The "with: path:" line has been removed here as well.

      - name: Build ffmpeg
        shell: msys2 {0}
        env:
          C_INCLUDE_PATH: /opt/include
          CPLUS_INCLUDE_PATH: /opt/include
          LIBRARY_PATH: /opt/lib
        run: |
          echo "Downloading dependencies from GitHub Releases..."
          curl -fsSL -O "https://github.com/${{ github.repository }}/releases/download/dev/lame-dev-3.100-1-x86_64.pkg.tar.zst"
          curl -fsSL -O "https://github.com/${{ github.repository }}/releases/download/dev/libogg-dev-1.3.5-1-x86_64.pkg.tar.zst"
          curl -fsSL -O "https://github.com/${{ github.repository }}/releases/download/dev/libvorbis_aotuv-dev-1.3.7-1-x86_64.pkg.tar.zst"
          curl -fsSL -O "https://github.com/${{ github.repository }}/releases/download/dev/opus-dev-1.5.2-1-x86_64.pkg.tar.zst"
          curl -fsSL -O "https://github.com/${{ github.repository }}/releases/download/dev/ffnvcodec-dev-13.0.19.0-1-x86_64.pkg.tar.zst"
          curl -fsSL -O "https://github.com/${{ github.repository }}/releases/download/dev/vulkan-dev-1.4.309.0-1-x86_64.pkg.tar.zst"
          curl -fsSL -O "https://github.com/${{ github.repository }}/releases/download/latest/vapoursynth-72-1-x86_64.pkg.tar.xz"
          
          echo "Installing dependencies..."
          pacman -U --noconfirm *.zst *.xz
          
          echo "Building ffmpeg..."
          cd "${GITHUB_WORKSPACE}/ffmpeg"
          makepkg -s --noconfirm -p PKGBUILD-git

      - name: Upload ffmpeg packages
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./ffmpeg/*pkg*.xz
          tag: bleeding_edge
          overwrite: true
          file_glob: true

      - uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./ffmpeg/*.zst
          tag: bleeding_edge
          overwrite: true
          file_glob: true

  package:
    needs: [ ffmpeg ]
    runs-on: windows-2022
    steps:
      - name: 'Setup MSYS2 environment'
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          cache: true
          install: p7zip

      - name: Bundle all binaries
        shell: powershell
        run: |
          $env:date = Get-Date -Format "yyyyMMdd"
          Write-Host "Downloading packages for without-python bundle..."
          $pkgs = @(
            "https://github.com/${{ github.repository }}/releases/download/bleeding_edge/ffmpeg-git-7.2pre-1-x86_64.pkg.tar.xz",
            "https://github.com/${{ github.repository }}/releases/download/latest/luajit-2.1-1-x86_64.pkg.tar.xz",
            "https://github.com/${{ github.repository }}/releases/download/latest/vapoursynth-72-1-x86_64.pkg.tar.xz",
            "https://github.com/${{ github.repository }}/releases/download/bleeding_edge/mpv-git-0.41pre-1-x86_64.pkg.tar.xz",
            "https://github.com/${{ github.repository }}/releases/download/bleeding_edge/mcfgthread-20250623-1-x86_64.pkg.tar.xz"
          )
          foreach ($pkg in $pkgs) { Invoke-WebRequest -Uri $pkg -OutFile (Split-Path $pkg -Leaf) }

          C:\msys64\usr\bin\bash.exe -lc 'pacman -U --noconfirm *.xz'
          md C:\msys64\ucrt64\bin\portable_config
          del *.xz
          7z a "All-in-One-MPV-git-withoutPython-$env:date.7z" C:\msys64\ucrt64\bin\*
          copy /Y "All-in-One-MPV-git-withoutPython-$env:date.7z" "All-in-One-MPV-git-withoutPython-latest.7z"

          Write-Host "Downloading packages for with-python bundle..."
          $python_pkgs = @(
            "https://github.com/${{ github.repository }}/releases/download/latest/python-embed-3.13.5-1-x86_64.pkg.tar.xz",
            "https://github.com/${{ github.repository }}/releases/download/latest/vapoursynth-plugin-core-extra-72-1-x86_64.pkg.tar.xz"
          )
          foreach ($pkg in $python_pkgs) { Invoke-WebRequest -Uri $pkg -OutFile (Split-Path $pkg -Leaf) }
          
          C:\msys64\usr\bin\bash.exe -lc 'pacman -U --noconfirm *.xz'
          7z a "All-in-One-MPV-git-$env:date.7z" C:\msys64\ucrt64\bin\*
          copy /Y "All-in-One-MPV-git-$env:date.7z" "All-in-One-MPV-git-latest.7z"

      - name: Upload bundles
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: All*.7z
          tag: bleeding_edge
          overwrite: true
          file_glob: true